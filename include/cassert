// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

/*
    cassert synopsis

Macros:

    assert

*/

#include <__assert>   // all public C++ headers provide the assertion handler
#include <__config>
//#include <assert.h>
#include <string_view>
namespace uc_log {
template<std::uint32_t Line, typename Filename, typename Expr>
extern void log_assert();
}

#define INTERNAL_assert_lambda(x)                                 \
    []() __attribute__((__noreturn__)) {                          \
        if(std::is_constant_evaluated()) {                        \
            int DO_NOT_USE_see_assert[1];                         \
            DO_NOT_USE_see_assert[1] = 0;                         \
        } else {                                                  \
            uc_log::log_assert<                                   \
              __LINE__,                                           \
              decltype([]() {                                     \
                  constexpr std::string_view f{__FILE_NAME__};    \
                  return f;                                       \
              }),                                                 \
              decltype([]() {                                     \
                  constexpr std::string_view e{"assert(" #x ")"}; \
                  return e;                                       \
              })>();                                              \
            while(true) {                                         \
                asm("bkpt 5" : : :);                              \
            }                                                     \
        }                                                         \
    }                                                             \
    ()

#define assert(x) ((void)((__builtin_expect(!!(x), true)) || (INTERNAL_assert_lambda(x), 0)))

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
    #pragma GCC system_header
#endif
